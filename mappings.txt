Definitive version
==================
No es posible mappear la barra espaciadora hold. ya que 
muchas veces escribimos <spacebar>f,
entonces SI O SI tenemos que esperar ciertos milisegundos
para que aplique el segundo efecto, cosa que es limitante.

no se puede mapear spacebar hold como shift tampoco
por las mismas razones

no se puede mapear spacebar + right_command para yabai
porque la terminal no reconoce esos comandos como yabai
y escribe codigo ascii. (lo mismo aplicara para caps + spacebar)
en segundo lugar no se puede presionar en el orden
spacebar > right_command porque spacebar no lo reconoce como
un modifier (no es suficiente con el simultaneous),
entonces se esta bien rigido.

Por lo tanto Si o si tenemos que utilzar solo modifiers para yabai

spacebar + right_command para Ctrl es mala idea porque
son muchas teclas para realizar simples acciones.
resulta mas facil usar simple caps, aunque se utilice el 
menique.

En conclusion no es posible de ninguna manera mapear
el spacebar como modifier en tu caso porque escribes
<leader>f casi casi inmediatamente, no hay un espacio de milisegundos
para hacer distincion entre espacio-f o <triggerEvent>
Descarta la idea de si en un futuro Karabiner agregara un feature
para ello, puesto que eso no depende del software sino de
la velocidad de tipeo del usuario.
Como un software va a distinguir si presionaste:
  <spacebar>... 15 milisegundos ... f
  o
  <spacebar>... 25 milisegundos ... f

Para un mapeo eficiente para ctrl/layer necesitaria un teclado
mecanico con un boton adicional, pero estos carecen de trackpoint,
ademas que perderia skill en el teclado de la mac.
Por lo tanto ya tengo definido el setting definitivo.

grave_accent_and_tilde `
close_bracket
hyphen -
equal_sign =
quote '
slash /

prioridad:
Se priorizo conservar el indice en su sitio. Se puso en baja prioridad aquellas que estan en
la left hand puesto que hacerlo con la derecha es mucho mas facil por la libertad de la mano.
Las incomodas o que requieren cierto consumo cognitivo (c-i) son baja prioridad.

`~!@#$%^&*()-_=+{}|\/?;
qwertyuioasdfghjklzxcvbnm

XXXXXXXXXXXXXXXXXXXXXXX
(){}-+=*!^%_#&@~`|\/?;$
HMHMHMHMMLMMLMMLLLLHMML

THEY ARE COMPLETE! (possibly swap *$ (T, U) for [] (G, H) semicolon + i harder than semicolon + u)

writing        vim effect         only vim effect changed
&?/+* $#@   \^   #?/@+ -()      #˙˙@+ -()
QWERT-UIO   []   QWERT-UIO      QWERT-UIO
 (;{-[]=|~  ˙˙    ^;{}$=%&~      ^˙˙}$=%&
 ASDFGHJKL  '"    ASDFGHJKL      ASDFGHJKL
  ! _`%})          | _`!~*        | ˙˙!~*
  Z-CVBNM          Z-CVBNM        Z CVBNM

falta agregar corchetes effecto, pero recuerda match it

aparte al abrir toggle term en modo side, desacomoda la 
posicion de las ventanas

1)  F  - x
2)  J  = x                                 
3)  A  ( x                                 
4)  D  { x                                 
5)  E  / x                                 
6)  S  ; x                                 
7)  W  ? x                                 
8)  Z  ! x                                 
9)  Q  & x                                 
10) V  ` x                                 
11) G  + x
12) R  @ x
13) T  * x
14) B  % x
15) C  _ x

16) O  \ x
17) M  | x
18) N  ~ x
19) H  # x
20) U  $ x
21) I  ^ x
22) X    descartada
23) L  ) caso special
24) K  } caso especial
25) Y    descartada

Por que quitaste la capa de numeros?
1) Porque no habia espacio para tres iconos nuevos:
    slash, question mark y semicolon.
    Los shift deben estar aparte (el mismo caso como el spacebar)
    y esos tres simbolos no habia lugar para pornerlos entonces
    tuve que eliminar la capa de numeros.
    Y estos simbolos necesitaban lugares prioritarios que los numeros
    estaban ocupando.
2) Ademas ya no voy a utilizar los simbolos extranios (con ctrl)
    y las teclas super incomodas (;+, ;+x)
3) Aparte, realmente usas demasiado los numeros?
   na creo. No eres contador.

REEMPLAZAR RIGHT_ALT por semicolon?
No porque ctrl en vim se utiliza de sobremanera,
y la tecla mas comoda y accesible es right_alt

El pulgar esta en todo momento en right_alt.
El menique esta en semicolon pero se mueve
continuamente hacia right shift (/), P, quote,
brackets.

Ademas semicolon+hjkl es incomodo, y esas son
las teclas mas utilizadas

Lo he probado y es mas comodo trabajar con right_alt 
que con semicolon.
Con semicolon tus dedos de alguna manera tienen que 
estar muy separados, estirandose cada vez que
utilizas semicolon, cosa no muy optima comparandolo
con right_alt que siempre esta disponible para tu
pulgar.
----------------------------
CAPS como yabai porque si utilizas solo 1 browser
y neovim, puedes navegar entre esas dos ventanas
con right_alt + space, dejando por completo el
movimiento brusco del menique.

ESTAN TODOS!
& = repeat :s
? = goes back searching word
/ = goes next searching word
@ = play macro
* = next match word
$ = end of line
^ = beggining line
\ = free

( = begin sentence
; = repeat t/T/f/F
{ = previous paragraph
- = free (prev line)
+ = free (next line)
# = previous match word
= = adjust to correct tab
} = next paragraph
) = end sentence

! = free (external filter)
_ = free ("soft" bol down)
` = go to mark
% = goes to open/closing element [{()}]
~ = free (toggle case)
| = go to column, also works for 0

' = goes to mark line
" = reg spec (not sure what does)
